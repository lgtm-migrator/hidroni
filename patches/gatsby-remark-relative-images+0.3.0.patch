diff --git a/node_modules/gatsby-remark-relative-images/index.js b/node_modules/gatsby-remark-relative-images/index.js
index 2326f5e..b4edea1 100644
--- a/node_modules/gatsby-remark-relative-images/index.js
+++ b/node_modules/gatsby-remark-relative-images/index.js
@@ -68,10 +68,11 @@ module.exports = function (_ref, pluginOptions) {
                 imagePath = slash(path.join(parentDirectory, node.url)); // See if there is a matching file path from gatsby-source-filesystem
 
                 imageNode = _.find(files, function (file) {
-                  return slash(path.normalize(file.absolutePath)) === imagePath;
+                  return slash(path.normalize(file.absolutePath)).endsWith(node.url);
                 }); // Return if we didn't find a match
 
                 if (imageNode) {
+                  imagePath = slash(path.normalize(imageNode.absolutePath));
                   _context.next = 7;
                   break;
                 }
@@ -222,11 +223,11 @@ var fileNodes = [];
 
 module.exports.fmImagesToRelative = function (node) {
   // Save file references
-  fileNodes.push(node); // Only process markdown files
+  fileNodes.push(node);
 
-  if (node.internal.type === "MarkdownRemark" || node.internal.type === "Mdx") {
+  return (target, fileAbsolutePath) => {
     // Convert paths in frontmatter to relative
-    var makeRelative = function makeRelative(value) {
+    function getFullPath(value) {
       if (_.isString(value) && path.isAbsolute(value)) {
         var imagePath;
 
@@ -237,15 +238,37 @@ module.exports.fmImagesToRelative = function (node) {
         });
 
         if (foundImageNode) {
-          return slash(path.relative(path.join(node.fileAbsolutePath, ".."), imagePath));
+          return slash(path.relative(path.join(fileAbsolutePath, ".."), imagePath));
         }
       }
 
       return value;
-    }; // Deeply iterate through frontmatter data for absolute paths
+    }
 
+    function makeRelative(value) {
+      if(_.isArray(value)) {
+        function mapper(value) {
+          if (_.isString(value)) {
+            getFullPath(value)
+          }
+          return makeRelative(value)
+        }
+        return _.map(value, mapper)
+      }
+      if (_.isPlainObject(value)) {
+        function mapper(value) {
+          if (_.isString(value)) {
+            getFullPath(value)
+          }
+          return makeRelative(value)
+        }
+        return _.mapValues(value, mapper)
+      }
+
+      return getFullPath(value);
+    }; // Deeply iterate through frontmatter data for absolute paths
 
-    deepMap(node.frontmatter, makeRelative, {
+    deepMap(target, makeRelative, {
       inPlace: true
     });
   }
